{"version":3,"file":"coursegoals.min.js","sources":["../src/coursegoals.js"],"sourcesContent":["import ModalForm from 'core_form/modalform';\nimport {get_string as getString} from 'core/str';\nimport Notification from 'core/notification';\n\nexport const initCourseGoalsTab = (parentelement) => {\n    try {\n        /* Move the widget to the header area */\n        let cg_tab = document.querySelector(\"#cg_goals_tab\");\n        let cg_parentnodes = parentelement.split(',');\n        for (let i in cg_parentnodes) {\n            let cg_pageheader = document.querySelector(cg_parentnodes[i]);\n            if (cg_pageheader) {\n                cg_pageheader.appendChild(cg_tab);\n                break;\n            }\n        }\n\n        let cg_details_id = \"cg_details_maintab\";\n        let cg_details_node = document.getElementById(cg_details_id);\n\n        let cg_localDetailsAreOpen = window.localStorage.getItem(\"details-\" + cg_details_id);\n        if (cg_localDetailsAreOpen == \"true\" || cg_localDetailsAreOpen == null) {\n            cg_details_node.setAttribute(\"open\", \"true\");\n        }\n\n        cg_tab.style.display = \"block\";\n\n        cg_details_node.addEventListener(\"toggle\", function(e){\n            let isOpen = event.target.getAttribute(\"open\");\n            window.localStorage.setItem(\"details-\" + cg_details_id, typeof(isOpen) === \"string\" ? \"true\" : \"false\");\n        });\n    }\n    catch (ignore) {}\n};\n\nexport const setupModals = (modals) => {\n    modals.forEach((modaldata) => {\n        let elements = document.querySelectorAll(modaldata.elementSelector);\n        elements.forEach((element) => {\n            element.addEventListener('click', function (e) {\n                let title = this.getAttribute('data-title') || this.innerHTML;\n                let formClass = modaldata.formClass;\n                let dataID = this.getAttribute('data-id') || null;\n                let dataParentID = this.getAttribute('data-parentid') || null;\n                let action = this.getAttribute('data-action') || null;\n                let form = new ModalForm({\n                    formClass,\n                    args: {\n                        action: action,\n                        dataid: dataID,\n                        dataparentid: dataParentID,\n                    },\n                    modalConfig: {\n                        title: title,\n                        large: true,\n                    },\n                    saveButtonText: title,\n                    returnFocus: e.target,\n                });\n                form.addEventListener(form.events.FORM_SUBMITTED, (event) => {\n                    if (event.detail.result) {\n                        if (event.detail.returnaction) {\n                            // todo\n                        }\n                        if (event.detail.redirecturl) {\n                            document.location = event.detail.redirecturl;\n                        } else {\n                            window.location.reload();\n                        }\n                    } else {\n                        Notification.addNotification({\n                            type: 'error',\n                            message: event.detail.errors.join('<br>')\n                        });\n                    }\n                });\n                form.show();\n            });\n        });\n    });\n};\n\n"],"names":["_modalform","_interopRequireDefault","_notification","parentelement","cg_tab","document","querySelector","cg_parentnodes","split","i","cg_pageheader","appendChild","cg_details_id","cg_details_node","getElementById","cg_localDetailsAreOpen","window","localStorage","getItem","setAttribute","style","display","addEventListener","e","isOpen","event","target","getAttribute","setItem","ignore","modals","forEach","modaldata","querySelectorAll","elementSelector","element","title","this","innerHTML","formClass","dataID","dataParentID","action","form","ModalForm","args","dataid","dataparentid","modalConfig","large","saveButtonText","returnFocus","events","FORM_SUBMITTED","detail","result","returnaction","redirecturl","location","reload","Notification","addNotification","type","message","errors","join","show"],"mappings":"4VAAAA,WAAAC,uBAAAD,YAEAE,cAAAD,uBAAAC,2CAEkC,SAACC,eAC3B,IAEA,IAAIC,OAASC,SAASC,cAAc,iBAChCC,eAAiBJ,cAAcK,MAAM,KACzC,IAAK,IAAIC,KAAKF,eAAgB,CACtBG,IAAAA,cAAgBL,SAASC,cAAcC,eAAeE,IAC1D,GAAIC,cAAe,CACfA,cAAcC,YAAYP,QAC1B,KACH,CACJ,CAEGQ,IACAC,gBAAkBR,SAASS,eADX,sBAGhBC,uBAAyBC,OAAOC,aAAaC,QAAQ,8BAC3B,QAA1BH,wBAA8D,MAA1BA,wBACpCF,gBAAgBM,aAAa,OAAQ,QAGzCf,OAAOgB,MAAMC,QAAU,QAEvBR,gBAAgBS,iBAAiB,UAAU,SAASC,GAC5CC,IAAAA,OAASC,MAAMC,OAAOC,aAAa,QACvCX,OAAOC,aAAaW,QAAQ,6BAA+C,iBAAZJ,OAAuB,OAAS,QAClG,GACJ,CACD,MAAOK,QAAU,CACpB,uBAE0B,SAACC,QACxBA,OAAOC,SAAQ,SAACC,WACG3B,SAAS4B,iBAAiBD,UAAUE,iBAC1CH,SAAQ,SAACI,SACdA,QAAQb,iBAAiB,SAAS,SAAUC,GACpCa,IAAAA,MAAQC,KAAKV,aAAa,eAAiBU,KAAKC,UAChDC,UAAYP,UAAUO,UACtBC,OAASH,KAAKV,aAAa,YAAc,KACzCc,aAAeJ,KAAKV,aAAa,kBAAoB,KACrDe,OAASL,KAAKV,aAAa,gBAAkB,KAC7CgB,KAAO,IAAIC,WAAAA,QAAU,CACrBL,UAAAA,UACAM,KAAM,CACFH,OAAQA,OACRI,OAAQN,OACRO,aAAcN,cAElBO,YAAa,CACTZ,MAAOA,MACPa,OAAO,GAEXC,eAAgBd,MAChBe,YAAa5B,EAAEG,SAEnBiB,KAAKrB,iBAAiBqB,KAAKS,OAAOC,gBAAgB,SAAC5B,OAC3CA,MAAM6B,OAAOC,QACT9B,MAAM6B,OAAOE,aAGb/B,MAAM6B,OAAOG,YACbpD,SAASqD,SAAWjC,MAAM6B,OAAOG,YAEjCzC,OAAO0C,SAASC,UAGpBC,cAAAA,QAAaC,gBAAgB,CACzBC,KAAM,QACNC,QAAStC,MAAM6B,OAAOU,OAAOC,KAAK,SAG7C,IACDtB,KAAKuB,MACR,GACJ,GACJ,GACJ"}